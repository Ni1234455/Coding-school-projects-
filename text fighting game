import random


class Warrior():
  def __init__(self):
    self.HP = 100
    self.MAXHP = 100
    self.MP = 50
    self.ATK = 150
    self.DEF = 200
    self.MGK = 75
    self.MGDEF = 250
    self.SPD = 80

  def get_HP(self):
    return self.HP

  def set_HP(self, HP):
    self.HP = HP

class Wizard():
  def __init__(self):
    self.HP = 75
    self.MAXHP = 75
    self.MP = 200
    self.ATK = 150
    self.DEF = 80
    self.MGK = 250
    self.MGDEF = 100
    self.SPD = 50
    
class Assassin():
  def __init__(self):
    self.HP = 80
    self.MAXHP = 80
    self.MP = 75
    self.ATK = 200
    self.DEF = 100
    self.MGK = 50
    self.MGDEF = 150
    self.SPD = 250

class Knight():
  def __init__(self):
    self.HP = 150
    self.MAXHP = 150
    self.MP = 100
    self.ATK = 200
    self.DEF = 250
    self.MGK = 75
    self.MGDEF = 50
    self.SPD = 80

def enemyAttacks(magical, player, enemy):
  if(magical == False):
    playerDamage = (enemy.ATK * 50) / player.DEF
    #player.HP = player.HP - playerDamage
    print ("Enemy inflicts " + str(playerDamage) + " damage!")
    #if(player.HP == 0):
    #  youLose()
  else:
    playerDamage = (enemy.MGK* 100) / player.MGDEF
    #player.HP = player.HP - playerDamage
    #enemy.HP = enemy.HP - enemyDamage
    enemy.MP = enemy.MP - 15
    print ("Enemy inflicts " + str(playerDamage) + " magic damage!")
  return playerDamage
    #if(player.HP == 0):
    #  youLose()

def enemyDefends(magical, player, enemy):
  if(magical == False):
    print("Enemy is defending! Damage reduced by a factor of 4\n")
    return 0
  else:
    print("Enemy is magic defending! Damage reduced by a factor of 6\n")
    enemy.MP = enemy.MP - 15    
    return -1


##ENEMY ACTION DECISION TREE
##ON THE FIRST ROUND: If enemy is a wizard or knight first, use  magic. If enemy is assassin or warrior, simply attack.
#After first round:
  #If player attacked or magic attacked last round and enemy has less than 50% HP, enemy defends or magic attack
  #Else if the player attacked or magic attacked last round and enemy has greater than 50% HP, the enemy should randomly select any offensive action (attack or magic)
  #else if the player defended or magic defended last round, the enemy should magic defend or attack
  #else the enemy should attack

#REMINDER TO SELF: INCLUDE "LAST ACTION" in BattleMenu()
#Last action 
# 0 if first round
# 1 if played attack last turn
#2 if played defended last turn
# 3 if player used magic last turn
#4 if played magic defended last turn
def EnemyDecision(enemy,player,lastaction):
  if((enemy.MGDEF == 50 or enemy.MGDEF == 100) and lastaction == 0):
    magical = True
    return enemyAttacks(magical,player,enemy)
  elif((enemy.MGDEF == 150 or enemy.MGDEF == 250) and lastaction == 0):
    magical = False
    return enemyAttacks(magical,player,enemy)
  elif((lastaction == 1) or (lastaction == 3) and (enemy.HP < enemy.MAXHP / 2)):
    x = round(random.uniform(1,4))
    if(x >= 2):
      magical = False
      return enemyDefends(magical,player,enemy)
    else:
      magical = True
      return enemyAttacks(magical,player,enemy)
  elif((lastAction == 4) or (lastActions == 2)):
    x = round(random.uniform(1,4))
    if(x >= 2):
      magical = False
      return enemyAttacks(magical,player,enemy)
    else:
      magical = True 
      return enemyDefends(magical,player,enemy)
  else:
    magical = False
    return enemyAttacks(magical,player,enemy)





##Begin main function
def RPG():
  choosingClass = int(input("Choose a class:\n 1) Warrior \n 2) Wizard \n 3) Assassin \n 4) Knight"))

  if(choosingClass == int(1)):
    player = Warrior()
    print("You choose warrior")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))
    return player

  elif(choosingClass == int(2)):
    player = Wizard()
    print("You choose wizard")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))
    return player

  elif(choosingClass == int(3)):
    player = Assassin()
    print("You choose assassin")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))
    return player

  elif(choosingClass == int(4)):
    player = Knight()
    print("You choose knight")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))
    return player

  else:
    print("That is not an option")
    RPG() #May need to be a break or continue statement if error thrown
  
  
  

  if(player.SPD == enemy.SPD):
    x = random.uniform(0,1)
    if(x > 0.5):
      movesFirst = True
    else:
      movesFirst = False



def BattleMenu(player, enemy):
  move = int(input("\n 1) Attack \n 2) Defend \n 3) MagicAttack \n 4) MagicDefend"))

  #Indicate lastaction = first round
  lastaction = 0
  if(move == 1):
    magical = False
    if(enemy.SPD > player.SPD):
      
      #Generate enemy decision
      playerDamage = EnemyDecision(enemy,player,lastaction)
     
     #Enemy moves first, so calculate player HP
      player.HP = player.HP - playerDamage

      #CHeck if player has lost
      if player.HP <= 0:
        youLose()
        return

      #Player moves first, check damage
      enemyDamage = playerAttacks(magical, player, enemy)

      #IF enemy has magic defended or defended, adjust damage
      if (playerDamage == 0):
        enemyDamage = enemyDamage/4
      elif (playerDamage == -1):
        enemyDamage = enemyDamage/6
        
      #Player moves second, calculate enemy HP
      enemy.HP = enemy.HP - enemyDamage

      #Check for victory
      if enemy.HP <= 0:
        youWin()
        return
      
    else:
      #Generate enemy decision
      playerDamage = EnemyDecision(enemy,player,lastaction)

      #Player goes first, calculate damage
      enemyDamage = playerAttacks(magical, player, enemy)
      
      #IF enemy has magic defended or defended, adjust damage
      if (playerDamage == 0):
        enemyDamage = enemyDamage/4
      elif (playerDamage == -1):
        enemyDamage = enemyDamage/6
        
      enemy.HP = enemy.HP - enemyDamage
      if enemy.HP <= 0:
        youWin()
        return
      
     
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
        
    lastaction  = 1

  elif(move == 2):
    magical = False
    if(enemy.SPD > player.SPD):
      playerDamage = EnemyDecision(enemy,player,lastaction)
      playerDamage = playerDamage/4
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
    else:
      playerDamage = EnemyDecision(enemy,player,lastaction)
      playerDamage = playerDamage/4
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
    lastaction = 2
  elif(move == 3):
    magical = True
    if(enemy.SPD > player.SPD):
      playerDamage = EnemyDecision(enemy,player,lastaction)
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
      enemyDamage = playerAttacks(magical, player, enemy)

      #IF enemy has magic defended or defended, adjust damage
      if (playerDamage == 0):
        enemyDamage = enemyDamage/4
      elif (playerDamage == -1):
        enemyDamage = enemyDamage/6
        
      enemy.HP = enemy.HP - enemyDamage
      if enemy.HP <= 0:
        youWin()
        return
  
    else:
      playerDamage = EnemyDecision(enemy,player,lastaction)
      enemyDamage = playerAttacks(magical,player,enemy)
      #IF enemy has magic defended or defended, adjust damage
      if (playerDamage == 0):
        enemyDamage = enemyDamage/4
      elif (playerDamage == -1):
        enemyDamage = enemyDamage/6
      enemy.HP = enemy.HP - enemyDamage
      if enemy.HP <= 0:
        youWin()
        return
        
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
    lastaction = 3
  elif(move == 4):
    magical = True
    if(enemy.SPD > player.SPD):
      playerDamage = EnemyDecision(enemy,player,lastaction)
      playerDamage = playerDamage/6
      player.MP = player.MP -15
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
    else:
      playerDamage = EnemyDecision(enemy,player,lastaction)
      playerDamage = playerDamage/6
      player.MP = player.MP -15
      player.HP = player.HP - playerDamage
      if player.HP <= 0:
        youLose()
        return
    lastaction = 4
    
def youWin():
  print("You Won")
  

def youLose():
  print("You died")
  

''' 
actions of the player
'''
def playerAttacks(magical, player, enemy):
  if(magical == False):
    enemyDamage = (player.ATK * 50) / enemy.DEF
    #enemy.HP = enemy.HP - enemyDamage
    print ("Player inflicts " + str(enemyDamage) + " damage!")
    #if(enemy.HP == 0):
    #  youWin()
  else:
    enemyDamage = (player.MGK* 100) / enemy.MGDEF
    #enemy.HP = enemy.HP - enemy damage
    player.MP = player.MP - 50
    print ("Player inflicts " + str(enemyDamage) + " damage!")
  return enemyDamage
   # if(enemy.HP == 0):
   #   youWin()
      
def playerDefends(magical, playerDamage, player):
  if(magical == False):
    playerDamage = playerDamage / 4
  else:
    playerDamage = playerDamage / 6
    player.MP = player.MP - 15
    

'''
actions of the player
'''






'''
def enemyDefends(magical, player):
  if(magical == False):
    playerAttacks()
    enemyDamage = enemyDamage / 4
  else:
    playerAttacks()
    enemyDamage = enemyDamage / 6
    enemy.MP = enemy.MP - 15
'''
'''
actions of the enemy'''
'''jjj'''



def randomEnemy():
  enemyChoice = round(random.uniform(1,4))
  if(enemyChoice == 1):
    enemy = Warrior()
    name = "warrior"
  elif(enemyChoice == 2):
    enemy = Wizard()
    name = "wizard"
  elif(enemyChoice == 3):
    enemy = Assassin()
    name = "assassin"
  elif(enemyChoice == 4):
    enemy = Knight()
    name = "knight"
  print("Your enemy is " + str(name))
  print("HP: " + str(enemy.HP))
  print("MP: " + str(enemy.MP))
  print("ATK: " + str(enemy.ATK))
  print("DEF: " + str(enemy.DEF))
  print("MGK: " + str(enemy.MGK))
  print("MGDEF: " + str(enemy.MGDEF))
  print("SPD: " + str(enemy.SPD))
  return enemy

x="1"
while(x=="1"):
  player = RPG()
  enemy = randomEnemy()
  while(player.HP > 0 and enemy.HP > 0):
    print("\nYour HP: " + str(player.HP))
    print("Enemy HP: " + str(enemy.HP) + "\n")
    BattleMenu(player,enemy)
  
  x=input("Press 1 to play again")








#damage = (ATK * 50) / (DEF / MKDEF) 

#Round of combat Order of operations FOR TESTING#
#User inputs what player will do 
#User inputs what enemy will do
#Print to screen (in order) each person's action
#Next round




##Main menu for user to select options














'''
###Entity class
-Warrior
-Wizard
-Assassin
-Knight




Attributes:
Each attribute below should have a corresponding "get_" (ex: returnHP) function and "set_" (ex: changeHP) function. More attributes may be created or necessary as development continues

HP
MP
ATK
DEF
MGK
MGDEF
SPD

#Combat system
Turn-based combat;
At the beginning of every turn, the user will choose between Attacking, Using a Skill, or Defending
  Attacking is a simple attack; damage calculated:
  receiver's new HP = receiver's [(DEF * 1.25) (if defending) or DEF (if any other action)] - user's ATK
  Skills; From a set list to be enumerated soon. Costs MP to accomplish a variety of facts; MGK and MGKDef account for the damage calculation
  Def: Boosts DEF and MGKDEF by 1.25x at the cost of an action

Once actions are selected by both parties, SPD determines who moves first; the entity with the highest speed  moves first, and the entity with the lowest speed moves last

Immediately once an entire party's HP is depleted,that side is declared to have lost, and the other side is declared to have won.


List of Skills

-Fire (Magic damage)
-Heal (Restores some HP)
-Regenerate (Restores small amounts of HP over 4-6 turns)
-Poison (Deals small amounts of MGK damage over 3-5 turns)
-Haste (Boots SPD of an individual for 2-4 turns)
-Slow (Reduces SPD of an individual for 2-4 turns)
-Weaken (Reduces target's DEF and MGKDEF for 1-2 turns)
-Protect (Redirects all ATK damage from target to user for 2-3 turns)
-Buff (Increases ATK for 2-3 turns)
-Aura (Increases MGKDEF for 1-2 turns)
'''
