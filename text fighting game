import random

RPG()

class Warrior():
  def __init__(self):
    self.HP = 100
    self.MP = 50
    self.ATK = 150
    self.DEF = 200
    self.MGK = 75
    self.MGDEF = 250
    self.SPD = 80

  def get_HP(self):
    return self.HP

  def set_HP(self, HP):
    self.HP = HP

class Wizard():
  def __init__(self):
    self.HP = 75
    self.MP = 200
    self.ATK = 150
    self.DEF = 80
    self.MGK = 250
    self.MGDEF = 100
    self.SPD = 50
    
class Assassin():
  def __init__(self):
    self.HP = 80
    self.MP = 75
    self.ATK = 200
    self.DEF = 100
    self.MGK = 50
    self.MGDEF = 150
    self.SPD = 250

class Knight():
  def __init__(self):
    self.HP = 150
    self.MP = 100
    self.ATK = 200
    self.DEF = 250
    self.MGK = 75
    self.MGDEF = 50
    self.SPD = 80




##Begin main function
def RPG():
  choosingClass = int(input("Choose a class:\n 1) Warrior \n 2) Wizard \n 3) Assassin \n 4) Knight"))

  if(choosingClass == int(1)):
    player = Warrior()
    print("You choose warrior")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))
    print("Your enemy is warrior")
    enemy =  Warrior()
    print("HP: " + str(enemy.HP))
    print("MP: " + str(enemy.MP))
    print("ATK: " + str(enemy.ATK))
    print("DEF: " + str(enemy.DEF))
    print("MGK: " + str(enemy.MGK))
    print("MGDEF: " + str(enemy.MGDEF))
    print("SPD: " + str(enemy.SPD))

  elif(choosingClass == int(2)):
    player = Wizard()
    print("You choose wizard")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))

  elif(choosingClass == int(3)):
    player = Assassin()
    print("You choose assassin")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))

  elif(choosingClass == int(4)):
    player = Knight()
    print("You choose knight")
    print("HP: " + str(player.HP))
    print("MP: " + str(player.MP))
    print("ATK: " + str(player.ATK))
    print("DEF: " + str(player.DEF))
    print("MGK: " + str(player.MGK))
    print("MGDEF: " + str(player.MGDEF))
    print("SPD: " + str(player.SPD))
  
  else:
    print("That is not an option")
    RPG() #May need to be a break or continue statement if error thrown


def BattleMenu():
  move = int(input("\n 1) Attack \n 2) Defend \n 3) Magic"))
  if()

def youWin():
  print("You Won")

def youLose():
  print("You died")



def playerMove():
  if(magical == FALSE)
      enemy.HP = enemy.HP - (player.ATK * 50) / enemy.DEF
      if(enemy.HP == 0):
        youWin()
    else:
      enemy.HP = enemy.HP - (player.MGK* 50) / enemy.MGDEF
      player.MP = player.MP - 15
      if(enemy.HP == 0):
        youWin()

def enemyMove():
  if(magical == FALSE)
    player.HP = player.HP - (enemy.ATK * 50) / player.DEF
    if(player.HP == 0):
      youLose()
  else:
    player.HP = player.HP - (enemy.MGK* 50) / player.MGDEF
    enemy.MP = enemy.MP - 15
    if(player.HP == 0):
      youLose()


if(player.SPD == enemy.SPD):
  x = random.uniform(0,1)
  if(x > 0.5):
    movesFirst = TRUE
  else:
    movesFirst = FALSE


def battleSystem():
  if(moveFirst == TRUE):
    playerMove()
    enemyMove()
  else:
    enemyMove()
    playerMove()



#damage = (ATK * 50) / (DEF / MKDEF) 

#Round of combat Order of operations FOR TESTING#
#User inputs what player will do 
#User inputs what enemy will do
#Print to screen (in order) each person's action
#Next round




##Main menu for user to select options














'''
###Entity class
-Warrior
-Wizard
-Assassin
-Knight




Attributes:
Each attribute below should have a corresponding "get_" (ex: returnHP) function and "set_" (ex: changeHP) function. More attributes may be created or necessary as development continues

HP
MP
ATK
DEF
MGK
MGDEF
SPD

#Combat system
Turn-based combat;
At the beginning of every turn, the user will choose between Attacking, Using a Skill, or Defending
  Attacking is a simple attack; damage calculated:
  receiver's new HP = receiver's [(DEF * 1.25) (if defending) or DEF (if any other action)] - user's ATK
  Skills; From a set list to be enumerated soon. Costs MP to accomplish a variety of facts; MGK and MGKDef account for the damage calculation
  Def: Boosts DEF and MGKDEF by 1.25x at the cost of an action

Once actions are selected by both parties, SPD determines who moves first; the entity with the highest speed  moves first, and the entity with the lowest speed moves last

Immediately once an entire party's HP is depleted,that side is declared to have lost, and the other side is declared to have won.


List of Skills

-Fire (Magic damage)
-Heal (Restores some HP)
-Regenerate (Restores small amounts of HP over 4-6 turns)
-Poison (Deals small amounts of MGK damage over 3-5 turns)
-Haste (Boots SPD of an individual for 2-4 turns)
-Slow (Reduces SPD of an individual for 2-4 turns)
-Weaken (Reduces target's DEF and MGKDEF for 1-2 turns)
-Protect (Redirects all ATK damage from target to user for 2-3 turns)
-Buff (Increases ATK for 2-3 turns)
-Aura (Increases MGKDEF for 1-2 turns)
'''
